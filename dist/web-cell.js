#! /usr/bin/env node

//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('web-cell', ["fs-extra","path","jsdom","amd-bundle","less","sass","@tech_query/node-toolkit","simple-git/promise","cross-spawn","stylus","commander","puppeteer-browser"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('fs-extra'),require('path'),require('jsdom'),require('amd-bundle'),require('less'),require('sass'),require('@tech_query/node-toolkit'),require('simple-git/promise'),require('cross-spawn'),require('stylus'),require('commander'),require('puppeteer-browser'));
    else
        return  this['web-cell'] = factory.call(self,this['fs-extra'],this['path'],this['jsdom'],this['amd-bundle'],this['less'],this['sass'],this['@tech_query/node-toolkit'],this['simple-git/promise'],this['cross-spawn'],this['stylus'],this['commander'],this['puppeteer-browser']);

})(function (fs_extra,path,jsdom,amd_bundle,less,sass,_tech_query_node_toolkit,simple_git_promise,cross_spawn,stylus,commander,puppeteer_browser) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

var _interopRequireDefault2 = require('@babel/runtime/helpers/interopRequireDefault');

var _objectSpread2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/objectSpread')
);

var _toConsumableArray2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/toConsumableArray')
);

var _regenerator = _interopRequireDefault2(
    require('@babel/runtime/regenerator')
);

var _asyncToGenerator2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/asyncToGenerator')
);

var _classCallCheck2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/classCallCheck')
);

var _createClass2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/createClass')
);

var _module_ = {
    './Component': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            var _fsExtra = require('fs-extra');

            var _path = require('path');

            var _jsdom = require('jsdom');

            var _amdBundle = _interopRequireDefault(require('amd-bundle'));

            var _less = _interopRequireDefault(require('less'));

            var SASS = _interopRequireWildcard(require('sass'));

            var _utility = require('./utility');

            var _nodeToolkit = require('@tech_query/node-toolkit');

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};

                    if (obj != null) {
                        for (var key in obj) {
                            if (
                                Object.prototype.hasOwnProperty.call(obj, key)
                            ) {
                                var desc =
                                    Object.defineProperty &&
                                    Object.getOwnPropertyDescriptor
                                        ? Object.getOwnPropertyDescriptor(
                                              obj,
                                              key
                                          )
                                        : {};

                                if (desc.get || desc.set) {
                                    Object.defineProperty(newObj, key, desc);
                                } else {
                                    newObj[key] = obj[key];
                                }
                            }
                        }
                    }

                    newObj.default = obj;
                    return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var directory = _utility.meta ? _utility.meta.directories : '';
            var single_entry = (0, _path.join)(directory.lib || '', 'index.js');
            /**
             * Component packer
             */

            var Component =
                /*#__PURE__*/
                (function() {
                    /**
                     * @param {string} path - Component directory
                     */
                    function Component(path) {
                        (0, _classCallCheck2.default)(this, Component);
                        this.path = path;
                        this.name = (0, _path.basename)(path);
                        this.entry = (0, _path.join)(path, 'index');
                    }
                    /**
                     * @param {string} path
                     *
                     * @return {DocumentFragment}
                     */

                    (0, _createClass2.default)(
                        Component,
                        [
                            {
                                key: 'toHTML',

                                /**
                                 * @return {DocumentFragment} HTML version bundle of this component
                                 */
                                value: (function() {
                                    var _toHTML = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee() {
                                                var _fragment$querySelect;

                                                var fragment,
                                                    CSS,
                                                    _iteratorNormalCompletion,
                                                    _didIteratorError,
                                                    _iteratorError,
                                                    _iterator,
                                                    _step,
                                                    sheet,
                                                    style,
                                                    script;

                                                return _regenerator.default.wrap(
                                                    function _callee$(
                                                        _context
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context.prev =
                                                                    _context.next)
                                                            ) {
                                                                case 0:
                                                                    _context.next = 2;
                                                                    return Component.parseHTML(
                                                                        this
                                                                            .entry +
                                                                            '.html'
                                                                    );

                                                                case 2:
                                                                    fragment =
                                                                        _context.sent;
                                                                    CSS = [];
                                                                    _iteratorNormalCompletion = true;
                                                                    _didIteratorError = false;
                                                                    _iteratorError = undefined;
                                                                    _context.prev = 7;
                                                                    _iterator = Component.findStyle(
                                                                        fragment
                                                                    )[
                                                                        Symbol
                                                                            .iterator
                                                                    ]();

                                                                case 9:
                                                                    if (
                                                                        (_iteratorNormalCompletion = (_step = _iterator.next())
                                                                            .done)
                                                                    ) {
                                                                        _context.next = 21;
                                                                        break;
                                                                    }

                                                                    sheet =
                                                                        _step.value;
                                                                    _context.next = 13;
                                                                    return Component.parseCSS(
                                                                        sheet.textContent ||
                                                                            (0,
                                                                            _path.join)(
                                                                                this
                                                                                    .path,
                                                                                sheet.getAttribute(
                                                                                    'href'
                                                                                )
                                                                            ),
                                                                        sheet.type,
                                                                        this
                                                                            .entry +
                                                                            '.css'
                                                                    );

                                                                case 13:
                                                                    style =
                                                                        _context.sent;

                                                                    if (style) {
                                                                        _context.next = 16;
                                                                        break;
                                                                    }

                                                                    return _context.abrupt(
                                                                        'continue',
                                                                        18
                                                                    );

                                                                case 16:
                                                                    sheet.replaceWith(
                                                                        style
                                                                    );
                                                                    if (
                                                                        style.parentNode ===
                                                                        fragment
                                                                    )
                                                                        CSS.push(
                                                                            style
                                                                        );

                                                                case 18:
                                                                    _iteratorNormalCompletion = true;
                                                                    _context.next = 9;
                                                                    break;

                                                                case 21:
                                                                    _context.next = 27;
                                                                    break;

                                                                case 23:
                                                                    _context.prev = 23;
                                                                    _context.t0 = _context[
                                                                        'catch'
                                                                    ](7);
                                                                    _didIteratorError = true;
                                                                    _iteratorError =
                                                                        _context.t0;

                                                                case 27:
                                                                    _context.prev = 27;
                                                                    _context.prev = 28;

                                                                    if (
                                                                        !_iteratorNormalCompletion &&
                                                                        _iterator.return !=
                                                                            null
                                                                    ) {
                                                                        _iterator.return();
                                                                    }

                                                                case 30:
                                                                    _context.prev = 30;

                                                                    if (
                                                                        !_didIteratorError
                                                                    ) {
                                                                        _context.next = 33;
                                                                        break;
                                                                    }

                                                                    throw _iteratorError;

                                                                case 33:
                                                                    return _context.finish(
                                                                        30
                                                                    );

                                                                case 34:
                                                                    return _context.finish(
                                                                        27
                                                                    );

                                                                case 35:
                                                                    (_fragment$querySelect = fragment.querySelector(
                                                                        'template'
                                                                    )
                                                                        .content).prepend.apply(
                                                                        _fragment$querySelect,
                                                                        CSS
                                                                    );

                                                                    script = fragment.querySelector(
                                                                        'script'
                                                                    );
                                                                    if (script)
                                                                        script.replaceWith(
                                                                            Component.parseJS(
                                                                                (0,
                                                                                _path.join)(
                                                                                    this
                                                                                        .path,
                                                                                    script.getAttribute(
                                                                                        'src'
                                                                                    )
                                                                                )
                                                                            )
                                                                        );
                                                                    return _context.abrupt(
                                                                        'return',
                                                                        fragment
                                                                    );

                                                                case 39:
                                                                case 'end':
                                                                    return _context.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee,
                                                    this,
                                                    [
                                                        [7, 23, 27, 35],
                                                        [28, , 30, 34]
                                                    ]
                                                );
                                            }
                                        )
                                    );

                                    return function toHTML() {
                                        return _toHTML.apply(this, arguments);
                                    };
                                })()
                                /**
                                 * @protected
                                 *
                                 * @param {String} file - File path
                                 *
                                 * @return {String} Legal ECMAScript source code
                                 */
                            },
                            {
                                key: 'assetOf',
                                value: (function() {
                                    var _assetOf = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee2(file) {
                                                return _regenerator.default.wrap(
                                                    function _callee2$(
                                                        _context2
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context2.prev =
                                                                    _context2.next)
                                                            ) {
                                                                case 0:
                                                                    _context2.t0 = (0,
                                                                    _path.extname)(
                                                                        file
                                                                    ).slice(1);
                                                                    _context2.next =
                                                                        _context2.t0 ===
                                                                        'html'
                                                                            ? 3
                                                                            : _context2.t0 ===
                                                                              'css'
                                                                                ? 9
                                                                                : _context2.t0 ===
                                                                                  'less'
                                                                                    ? 9
                                                                                    : _context2.t0 ===
                                                                                      'sass'
                                                                                        ? 9
                                                                                        : _context2.t0 ===
                                                                                          'scss'
                                                                                            ? 9
                                                                                            : _context2.t0 ===
                                                                                              'stylus'
                                                                                                ? 9
                                                                                                : _context2.t0 ===
                                                                                                  'js'
                                                                                                    ? 13
                                                                                                    : _context2.t0 ===
                                                                                                      'json'
                                                                                                        ? 14
                                                                                                        : 18;
                                                                    break;

                                                                case 3:
                                                                    _context2.t1 = Component;
                                                                    _context2.next = 6;
                                                                    return this.toHTML();

                                                                case 6:
                                                                    _context2.t2 =
                                                                        _context2.sent;
                                                                    file = _context2.t1.stringOf.call(
                                                                        _context2.t1,
                                                                        _context2.t2
                                                                    );
                                                                    return _context2.abrupt(
                                                                        'break',
                                                                        19
                                                                    );

                                                                case 9:
                                                                    _context2.next = 11;
                                                                    return Component.parseCSS(
                                                                        file
                                                                    );

                                                                case 11:
                                                                    file =
                                                                        _context2
                                                                            .sent
                                                                            .textContent;
                                                                    return _context2.abrupt(
                                                                        'break',
                                                                        19
                                                                    );

                                                                case 13:
                                                                    return _context2.abrupt(
                                                                        'return'
                                                                    );

                                                                case 14:
                                                                    _context2.next = 16;
                                                                    return (0,
                                                                    _fsExtra.readFile)(
                                                                        file
                                                                    );

                                                                case 16:
                                                                    _context2.t3 =
                                                                        _context2.sent;
                                                                    return _context2.abrupt(
                                                                        'return',
                                                                        _context2.t3 +
                                                                            ''
                                                                    );

                                                                case 18:
                                                                    file = (0,
                                                                    _nodeToolkit.toDataURI)(
                                                                        file
                                                                    );

                                                                case 19:
                                                                    return _context2.abrupt(
                                                                        'return',
                                                                        JSON.stringify(
                                                                            file
                                                                        )
                                                                    );

                                                                case 20:
                                                                case 'end':
                                                                    return _context2.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee2,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function assetOf(_x) {
                                        return _assetOf.apply(this, arguments);
                                    };
                                })()
                                /**
                                 * @return {string} JS version bundle of this component
                                 */
                            },
                            {
                                key: 'toJS',
                                value: (function() {
                                    var _toJS = (0, _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee3() {
                                                var temp_file,
                                                    _iteratorNormalCompletion2,
                                                    _didIteratorError2,
                                                    _iteratorError2,
                                                    _iterator2,
                                                    _step2,
                                                    file,
                                                    temp,
                                                    source;

                                                return _regenerator.default.wrap(
                                                    function _callee3$(
                                                        _context3
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context3.prev =
                                                                    _context3.next)
                                                            ) {
                                                                case 0:
                                                                    temp_file = [];
                                                                    _iteratorNormalCompletion2 = true;
                                                                    _didIteratorError2 = false;
                                                                    _iteratorError2 = undefined;
                                                                    _context3.prev = 4;
                                                                    _context3.next = 7;
                                                                    return (0,
                                                                    _fsExtra.readdir)(
                                                                        this
                                                                            .path
                                                                    );

                                                                case 7:
                                                                    _context3.t0 =
                                                                        Symbol.iterator;
                                                                    _iterator2 = _context3.sent[
                                                                        _context3
                                                                            .t0
                                                                    ]();

                                                                case 9:
                                                                    if (
                                                                        (_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                                                                            .done)
                                                                    ) {
                                                                        _context3.next = 26;
                                                                        break;
                                                                    }

                                                                    file =
                                                                        _step2.value;
                                                                    file = (0,
                                                                    _path.join)(
                                                                        this
                                                                            .path,
                                                                        file
                                                                    );

                                                                    if (
                                                                        (0,
                                                                        _fsExtra.statSync)(
                                                                            file
                                                                        ).isFile()
                                                                    ) {
                                                                        _context3.next = 14;
                                                                        break;
                                                                    }

                                                                    return _context3.abrupt(
                                                                        'continue',
                                                                        23
                                                                    );

                                                                case 14:
                                                                    temp = ''.concat(
                                                                        file,
                                                                        '.js'
                                                                    );
                                                                    _context3.next = 17;
                                                                    return this.assetOf(
                                                                        file
                                                                    );

                                                                case 17:
                                                                    file =
                                                                        _context3.sent;

                                                                    if (
                                                                        file !=
                                                                        null
                                                                    ) {
                                                                        _context3.next = 20;
                                                                        break;
                                                                    }

                                                                    return _context3.abrupt(
                                                                        'continue',
                                                                        23
                                                                    );

                                                                case 20:
                                                                    temp_file.push(
                                                                        temp
                                                                    );
                                                                    _context3.next = 23;
                                                                    return (0,
                                                                    _fsExtra.outputFile)(
                                                                        temp,
                                                                        'export default '.concat(
                                                                            file
                                                                        )
                                                                    );

                                                                case 23:
                                                                    _iteratorNormalCompletion2 = true;
                                                                    _context3.next = 9;
                                                                    break;

                                                                case 26:
                                                                    _context3.next = 32;
                                                                    break;

                                                                case 28:
                                                                    _context3.prev = 28;
                                                                    _context3.t1 = _context3[
                                                                        'catch'
                                                                    ](4);
                                                                    _didIteratorError2 = true;
                                                                    _iteratorError2 =
                                                                        _context3.t1;

                                                                case 32:
                                                                    _context3.prev = 32;
                                                                    _context3.prev = 33;

                                                                    if (
                                                                        !_iteratorNormalCompletion2 &&
                                                                        _iterator2.return !=
                                                                            null
                                                                    ) {
                                                                        _iterator2.return();
                                                                    }

                                                                case 35:
                                                                    _context3.prev = 35;

                                                                    if (
                                                                        !_didIteratorError2
                                                                    ) {
                                                                        _context3.next = 38;
                                                                        break;
                                                                    }

                                                                    throw _iteratorError2;

                                                                case 38:
                                                                    return _context3.finish(
                                                                        35
                                                                    );

                                                                case 39:
                                                                    return _context3.finish(
                                                                        32
                                                                    );

                                                                case 40:
                                                                    source = Component.packJS(
                                                                        this
                                                                            .entry +
                                                                            '.js'
                                                                    );
                                                                    _context3.next = 43;
                                                                    return Promise.all(
                                                                        temp_file.map(
                                                                            function(
                                                                                file
                                                                            ) {
                                                                                return (0,
                                                                                _fsExtra.remove)(
                                                                                    file
                                                                                );
                                                                            }
                                                                        )
                                                                    );

                                                                case 43:
                                                                    return _context3.abrupt(
                                                                        'return',
                                                                        source
                                                                    );

                                                                case 44:
                                                                case 'end':
                                                                    return _context3.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee3,
                                                    this,
                                                    [
                                                        [4, 28, 32, 40],
                                                        [33, , 35, 39]
                                                    ]
                                                );
                                            }
                                        )
                                    );

                                    return function toJS() {
                                        return _toJS.apply(this, arguments);
                                    };
                                })()
                            }
                        ],
                        [
                            {
                                key: 'parseHTML',
                                value: (function() {
                                    var _parseHTML = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee4(path) {
                                                return _regenerator.default.wrap(
                                                    function _callee4$(
                                                        _context4
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context4.prev =
                                                                    _context4.next)
                                                            ) {
                                                                case 0:
                                                                    _context4.t0 =
                                                                        _jsdom.JSDOM;
                                                                    _context4.next = 3;
                                                                    return (0,
                                                                    _fsExtra.readFile)(
                                                                        path
                                                                    );

                                                                case 3:
                                                                    _context4.t1 =
                                                                        _context4.sent;
                                                                    _context4.t2 =
                                                                        _context4.t1 +
                                                                        '';
                                                                    return _context4.abrupt(
                                                                        'return',
                                                                        _context4.t0.fragment.call(
                                                                            _context4.t0,
                                                                            _context4.t2
                                                                        )
                                                                    );

                                                                case 6:
                                                                case 'end':
                                                                    return _context4.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee4,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function parseHTML(_x2) {
                                        return _parseHTML.apply(
                                            this,
                                            arguments
                                        );
                                    };
                                })()
                                /**
                                 * @param {string}  source - File path or Style source code
                                 * @param {?string} type   - MIME type
                                 * @param {string}  [base] - Path of the file which `@import` located in
                                 *
                                 * @return {?Element} Style element
                                 */
                            },
                            {
                                key: 'parseCSS',
                                value: (function() {
                                    var _parseCSS = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee5(
                                                source,
                                                type,
                                                base
                                            ) {
                                                var style, paths;
                                                return _regenerator.default.wrap(
                                                    function _callee5$(
                                                        _context5
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context5.prev =
                                                                    _context5.next)
                                                            ) {
                                                                case 0:
                                                                    type = type
                                                                        ? type.split(
                                                                              '/'
                                                                          )[1]
                                                                        : (0,
                                                                          _path.extname)(
                                                                              source
                                                                          ).slice(
                                                                              1
                                                                          );

                                                                    if (
                                                                        source.includes(
                                                                            '\n'
                                                                        )
                                                                    ) {
                                                                        _context5.next = 6;
                                                                        break;
                                                                    }

                                                                    _context5.next = 4;
                                                                    return (0,
                                                                    _fsExtra.readFile)(
                                                                        (base = source)
                                                                    );

                                                                case 4:
                                                                    _context5.t0 =
                                                                        _context5.sent;
                                                                    source =
                                                                        _context5.t0 +
                                                                        '';

                                                                case 6:
                                                                    paths = [
                                                                        (0,
                                                                        _path.dirname)(
                                                                            base
                                                                        )
                                                                    ];
                                                                    _context5.t1 = type;
                                                                    _context5.next =
                                                                        _context5.t1 ===
                                                                        'css'
                                                                            ? 10
                                                                            : _context5.t1 ===
                                                                              'sass'
                                                                                ? 12
                                                                                : _context5.t1 ===
                                                                                  'scss'
                                                                                    ? 12
                                                                                    : _context5.t1 ===
                                                                                      'less'
                                                                                        ? 14
                                                                                        : _context5.t1 ===
                                                                                          'stylus'
                                                                                            ? 18
                                                                                            : 21;
                                                                    break;

                                                                case 10:
                                                                    style = source;
                                                                    return _context5.abrupt(
                                                                        'break',
                                                                        21
                                                                    );

                                                                case 12:
                                                                    style = SASS.renderSync(
                                                                        {
                                                                            data: source,
                                                                            includePaths: paths
                                                                        }
                                                                    ).css;
                                                                    return _context5.abrupt(
                                                                        'break',
                                                                        21
                                                                    );

                                                                case 14:
                                                                    _context5.next = 16;
                                                                    return _less.default.render(
                                                                        source,
                                                                        {
                                                                            paths: paths
                                                                        }
                                                                    );

                                                                case 16:
                                                                    style =
                                                                        _context5
                                                                            .sent
                                                                            .css;
                                                                    return _context5.abrupt(
                                                                        'break',
                                                                        21
                                                                    );

                                                                case 18:
                                                                    _context5.next = 20;
                                                                    return (0,
                                                                    _utility.parseStylus)(
                                                                        source,
                                                                        {
                                                                            paths: paths
                                                                        }
                                                                    );

                                                                case 20:
                                                                    style =
                                                                        _context5.sent;

                                                                case 21:
                                                                    return _context5.abrupt(
                                                                        'return',
                                                                        style &&
                                                                            Object.assign(
                                                                                _utility.document.createElement(
                                                                                    'style'
                                                                                ),
                                                                                {
                                                                                    textContent: style
                                                                                }
                                                                            )
                                                                    );

                                                                case 22:
                                                                case 'end':
                                                                    return _context5.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee5,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function parseCSS(_x3, _x4, _x5) {
                                        return _parseCSS.apply(this, arguments);
                                    };
                                })()
                                /**
                                 * @param {DocumentFragment} fragment
                                 *
                                 * @return {Element[]}
                                 */
                            },
                            {
                                key: 'findStyle',
                                value: function findStyle(fragment) {
                                    var _ref;

                                    return (0, _toConsumableArray2.default)(
                                        fragment.querySelectorAll(
                                            'link[rel="stylesheet"]'
                                        )
                                    ).concat(
                                        (0, _toConsumableArray2.default)(
                                            (_ref = []).concat.apply(
                                                _ref,
                                                (0,
                                                _toConsumableArray2.default)(
                                                    Array.from(
                                                        fragment.querySelectorAll(
                                                            'template'
                                                        ),
                                                        function(template) {
                                                            return (0,
                                                            _toConsumableArray2.default)(
                                                                template.content.querySelectorAll(
                                                                    'style'
                                                                )
                                                            );
                                                        }
                                                    )
                                                )
                                            )
                                        )
                                    );
                                }
                                /**
                                 * @param {string} tagName
                                 *
                                 * @return {string}
                                 */
                            },
                            {
                                key: 'identifierOf',
                                value: function identifierOf(tagName) {
                                    return (
                                        tagName[0].toUpperCase() +
                                        tagName
                                            .replace(/-(\w)/g, function(
                                                _,
                                                char
                                            ) {
                                                return char.toUpperCase();
                                            })
                                            .slice(1)
                                    );
                                }
                                /**
                                 * @param {String} path - Full name of a JS file
                                 *
                                 * @return {String} Packed JS source code
                                 */
                            },
                            {
                                key: 'packJS',
                                value: function packJS(path) {
                                    var name =
                                        path === single_entry &&
                                        _utility.meta.name;
                                    path = path
                                        .split('.')
                                        .slice(0, -1)
                                        .join('.');
                                    return new _amdBundle.default(path).bundle(
                                        name ||
                                            this.identifierOf(
                                                (0, _path.basename)(
                                                    (0, _path.dirname)(path)
                                                )
                                            )
                                    );
                                }
                                /**
                                 * @param {string} path
                                 *
                                 * @return {Element}
                                 */
                            },
                            {
                                key: 'parseJS',
                                value: function parseJS(path) {
                                    return Object.assign(
                                        _utility.document.createElement(
                                            'script'
                                        ),
                                        {
                                            text: '\n'.concat(
                                                this.packJS(path),
                                                '\n'
                                            )
                                        }
                                    );
                                }
                                /**
                                 * @param {DocumentFragment} fragment
                                 *
                                 * @return {string}
                                 */
                            },
                            {
                                key: 'stringOf',
                                value: function stringOf(fragment) {
                                    return Array.from(
                                        fragment.childNodes,
                                        function(node) {
                                            switch (node.nodeType) {
                                                case 1:
                                                    return node.outerHTML;

                                                case 3:
                                                    return node.nodeValue;

                                                case 8:
                                                    return '<!--'.concat(
                                                        node.nodeValue,
                                                        '-->'
                                                    );
                                            }
                                        }
                                    ).join('');
                                }
                            }
                        ]
                    );
                    return Component;
                })();

            exports.default = Component;
        }
    },
    './command': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.boot = boot;
            exports.bundle = bundle;
            exports.pack = pack;

            var _path = require('path');

            var _nodeToolkit = require('@tech_query/node-toolkit');

            var _fsExtra = require('fs-extra');

            var _promise = _interopRequireDefault(
                require('simple-git/promise')
            );

            var _crossSpawn = _interopRequireDefault(require('cross-spawn'));

            var _Component = _interopRequireDefault(require('./Component'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            function setTemplate() {
                return _setTemplate.apply(this, arguments);
            }

            function _setTemplate() {
                _setTemplate = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee6() {
                        var template,
                            _iteratorNormalCompletion3,
                            _didIteratorError3,
                            _iteratorError3,
                            _iterator3,
                            _step3,
                            file,
                            _path2,
                            type;

                        return _regenerator.default.wrap(
                            function _callee6$(_context6) {
                                while (1) {
                                    switch ((_context6.prev = _context6.next)) {
                                        case 0:
                                            template = (0, _path.join)(
                                                (0,
                                                _nodeToolkit.currentModulePath)(),
                                                '../../template'
                                            );
                                            _iteratorNormalCompletion3 = true;
                                            _didIteratorError3 = false;
                                            _iteratorError3 = undefined;
                                            _context6.prev = 4;
                                            _iterator3 = (0,
                                            _fsExtra.readdirSync)(template)[
                                                Symbol.iterator
                                            ]();

                                        case 6:
                                            if (
                                                (_iteratorNormalCompletion3 = (_step3 = _iterator3.next())
                                                    .done)
                                            ) {
                                                _context6.next = 39;
                                                break;
                                            }

                                            file = _step3.value;
                                            (_path2 = (0, _path.join)(
                                                template,
                                                file
                                            )),
                                                (type = 'Skip');

                                            if (
                                                (0, _fsExtra.existsSync)(file)
                                            ) {
                                                _context6.next = 15;
                                                break;
                                            }

                                            _context6.next = 12;
                                            return (0, _fsExtra.copy)(
                                                _path2,
                                                file
                                            );

                                        case 12:
                                            type = 'Create';
                                            _context6.next = 35;
                                            break;

                                        case 15:
                                            if (
                                                !(
                                                    (0, _path.extname)(file) ===
                                                    '.json'
                                                )
                                            ) {
                                                _context6.next = 35;
                                                break;
                                            }

                                            _context6.t0 = (0,
                                            _fsExtra.outputFile);
                                            _context6.t1 = file;
                                            _context6.t2 = JSON;
                                            _context6.t3 = (0,
                                            _nodeToolkit.patch);
                                            _context6.t4 = JSON;
                                            _context6.next = 23;
                                            return (0, _fsExtra.readFile)(file);

                                        case 23:
                                            _context6.t5 = _context6.sent;
                                            _context6.t6 = _context6.t4.parse.call(
                                                _context6.t4,
                                                _context6.t5
                                            );
                                            _context6.t7 = JSON;
                                            _context6.next = 28;
                                            return (0, _fsExtra.readFile)(
                                                _path2
                                            );

                                        case 28:
                                            _context6.t8 = _context6.sent;
                                            _context6.t9 = _context6.t7.parse.call(
                                                _context6.t7,
                                                _context6.t8
                                            );
                                            _context6.t10 = (0, _context6.t3)(
                                                _context6.t6,
                                                _context6.t9
                                            );
                                            _context6.t11 = _context6.t2.stringify.call(
                                                _context6.t2,
                                                _context6.t10,
                                                null,
                                                4
                                            );
                                            _context6.next = 34;
                                            return (0, _context6.t0)(
                                                _context6.t1,
                                                _context6.t11
                                            );

                                        case 34:
                                            type = 'Update';

                                        case 35:
                                            console.info(
                                                ''
                                                    .concat(
                                                        type.padEnd(6),
                                                        ' --> '
                                                    )
                                                    .concat(file)
                                            );

                                        case 36:
                                            _iteratorNormalCompletion3 = true;
                                            _context6.next = 6;
                                            break;

                                        case 39:
                                            _context6.next = 45;
                                            break;

                                        case 41:
                                            _context6.prev = 41;
                                            _context6.t12 = _context6['catch'](
                                                4
                                            );
                                            _didIteratorError3 = true;
                                            _iteratorError3 = _context6.t12;

                                        case 45:
                                            _context6.prev = 45;
                                            _context6.prev = 46;

                                            if (
                                                !_iteratorNormalCompletion3 &&
                                                _iterator3.return != null
                                            ) {
                                                _iterator3.return();
                                            }

                                        case 48:
                                            _context6.prev = 48;

                                            if (!_didIteratorError3) {
                                                _context6.next = 51;
                                                break;
                                            }

                                            throw _iteratorError3;

                                        case 51:
                                            return _context6.finish(48);

                                        case 52:
                                            return _context6.finish(45);

                                        case 53:
                                        case 'end':
                                            return _context6.stop();
                                    }
                                }
                            },
                            _callee6,
                            this,
                            [[4, 41, 45, 53], [46, , 48, 52]]
                        );
                    })
                );
                return _setTemplate.apply(this, arguments);
            }

            function setMeta() {
                return _setMeta.apply(this, arguments);
            }
            /**
             * Boot current directory as a WebCell project
             */

            function _setMeta() {
                _setMeta = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee7() {
                        var meta, git, config, url, ReadMe, text;
                        return _regenerator.default.wrap(
                            function _callee7$(_context7) {
                                while (1) {
                                    switch ((_context7.prev = _context7.next)) {
                                        case 0:
                                            _context7.t0 = JSON;
                                            _context7.next = 3;
                                            return (0, _fsExtra.readFile)(
                                                'package.json'
                                            );

                                        case 3:
                                            _context7.t1 = _context7.sent;
                                            meta = _context7.t0.parse.call(
                                                _context7.t0,
                                                _context7.t1
                                            );
                                            git = (0, _promise.default)();
                                            config = {};
                                            _context7.next = 9;
                                            return git.checkIsRepo();

                                        case 9:
                                            if (_context7.sent) {
                                                _context7.next = 12;
                                                break;
                                            }

                                            _context7.next = 12;
                                            return git.init();

                                        case 12:
                                            _context7.prev = 12;
                                            _context7.next = 15;
                                            return git.listRemote([
                                                '--get-url'
                                            ]);

                                        case 15:
                                            url = _context7.sent.trim();
                                            _context7.next = 21;
                                            break;

                                        case 18:
                                            _context7.prev = 18;
                                            _context7.t2 = _context7['catch'](
                                                12
                                            );
                                            url = '';

                                        case 21:
                                            if (!meta.name)
                                                config.name = (url
                                                    ? /([^/]+)\.git$/.exec(
                                                          url
                                                      )[1]
                                                    : (0, _path.basename)(
                                                          process.cwd()
                                                      ).replace(
                                                          /[^a-zA-Z0-9-]/g,
                                                          '-'
                                                      )
                                                ).toLowerCase();

                                            if (meta.description) {
                                                _context7.next = 31;
                                                break;
                                            }

                                            ReadMe = (0, _nodeToolkit.findFile)(
                                                /^ReadMe\.?/i
                                            );

                                            if (!ReadMe) {
                                                _context7.next = 31;
                                                break;
                                            }

                                            _context7.t3 = /^[^#].+/m;
                                            _context7.next = 28;
                                            return (0, _fsExtra.readFile)(
                                                ReadMe
                                            );

                                        case 28:
                                            _context7.t4 = _context7.sent;
                                            text = _context7.t3.exec.call(
                                                _context7.t3,
                                                _context7.t4
                                            );
                                            if (text)
                                                config.description = text[0].trim();

                                        case 31:
                                            if (
                                                !meta.repository ||
                                                !meta.bugs
                                            ) {
                                                config.repository = meta.repository || {
                                                    type: 'git',
                                                    url: url
                                                };
                                                config.bugs = meta.bugs || {
                                                    url: url.replace(
                                                        /\.git$/,
                                                        '/issues/'
                                                    )
                                                };
                                                config.homepage =
                                                    meta.homepage ||
                                                    url.replace(/\.git$/, '/');
                                            }

                                            return _context7.abrupt(
                                                'return',
                                                (0, _objectSpread2.default)(
                                                    {},
                                                    config,
                                                    meta
                                                )
                                            );

                                        case 33:
                                        case 'end':
                                            return _context7.stop();
                                    }
                                }
                            },
                            _callee7,
                            this,
                            [[12, 18]]
                        );
                    })
                );
                return _setMeta.apply(this, arguments);
            }

            function boot() {
                return _boot.apply(this, arguments);
            }
            /**
             * Bundle components to JS modules
             *
             * @param {string} path - Source directory
             *
             * @return {string[]} Component paths
             */

            function _boot() {
                _boot = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee8() {
                        return _regenerator.default.wrap(
                            function _callee8$(_context8) {
                                while (1) {
                                    switch ((_context8.prev = _context8.next)) {
                                        case 0:
                                            console.time('Write configuration');
                                            _context8.next = 3;
                                            return setTemplate();

                                        case 3:
                                            _context8.t0 = (0,
                                            _fsExtra.outputFile);
                                            _context8.t1 = JSON;
                                            _context8.next = 7;
                                            return setMeta();

                                        case 7:
                                            _context8.t2 = _context8.sent;
                                            _context8.t3 = _context8.t1.stringify.call(
                                                _context8.t1,
                                                _context8.t2,
                                                null,
                                                4
                                            );
                                            _context8.next = 11;
                                            return (0, _context8.t0)(
                                                'package.json',
                                                _context8.t3
                                            );

                                        case 11:
                                            console.info(
                                                '--------------------'
                                            );
                                            console.timeEnd(
                                                'Write configuration'
                                            );
                                            (0, _crossSpawn.default)(
                                                'npm',
                                                ['install'],
                                                {
                                                    stdio: 'inherit'
                                                }
                                            );

                                        case 14:
                                        case 'end':
                                            return _context8.stop();
                                    }
                                }
                            },
                            _callee8,
                            this
                        );
                    })
                );
                return _boot.apply(this, arguments);
            }

            function bundle(_x6) {
                return _bundle.apply(this, arguments);
            }
            /**
             * Bundle components into a JS package
             *
             * @param {string} path - Source directory
             *
             * @return {string[]} Component paths
             */

            function _bundle() {
                _bundle = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee9(path) {
                        var result, component;
                        return _regenerator.default.wrap(
                            function _callee9$(_context9) {
                                while (1) {
                                    switch ((_context9.prev = _context9.next)) {
                                        case 0:
                                            result = [];

                                            if (
                                                !(0, _fsExtra.existsSync)(
                                                    (0, _path.join)(
                                                        path,
                                                        'index.js'
                                                    )
                                                )
                                            ) {
                                                _context9.next = 11;
                                                break;
                                            }

                                            component = new _Component.default(
                                                path
                                            );
                                            result[0] = 'dist/'.concat(
                                                component.name,
                                                '.js'
                                            );
                                            _context9.t0 = (0,
                                            _fsExtra.outputFile);
                                            _context9.t1 = result[0];
                                            _context9.next = 8;
                                            return component.toJS();

                                        case 8:
                                            _context9.t2 = _context9.sent;
                                            _context9.next = 11;
                                            return (0, _context9.t0)(
                                                _context9.t1,
                                                _context9.t2
                                            );

                                        case 11:
                                            if (
                                                (0, _fsExtra.statSync)(
                                                    path
                                                ).isDirectory()
                                            )
                                                result.push.apply(
                                                    result,
                                                    (0,
                                                    _toConsumableArray2.default)(
                                                        (0,
                                                        _fsExtra.readdirSync)(
                                                            path
                                                        ).map(function(file) {
                                                            return bundle(
                                                                (0, _path.join)(
                                                                    path,
                                                                    file
                                                                )
                                                            );
                                                        })
                                                    )
                                                );
                                            return _context9.abrupt(
                                                'return',
                                                result
                                            );

                                        case 13:
                                        case 'end':
                                            return _context9.stop();
                                    }
                                }
                            },
                            _callee9,
                            this
                        );
                    })
                );
                return _bundle.apply(this, arguments);
            }

            function pack(_x7) {
                return _pack.apply(this, arguments);
            }

            function _pack() {
                _pack = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee10(path) {
                        var file;
                        return _regenerator.default.wrap(
                            function _callee10$(_context10) {
                                while (1) {
                                    switch (
                                        (_context10.prev = _context10.next)
                                    ) {
                                        case 0:
                                            _context10.next = 2;
                                            return bundle(path);

                                        case 2:
                                            file = _context10.sent;
                                            _context10.next = 5;
                                            return (0, _fsExtra.outputFile)(
                                                'dist/index.js',
                                                file
                                                    .map(function(item) {
                                                        item = (0,
                                                        _path.basename)(item);
                                                        console.info(
                                                            '\u221A Component "'.concat(
                                                                item,
                                                                '" is packed in'
                                                            )
                                                        );
                                                        return "export * from './".concat(
                                                            item,
                                                            "';"
                                                        );
                                                    })
                                                    .join('\n')
                                            );

                                        case 5:
                                            return _context10.abrupt(
                                                'return',
                                                file
                                            );

                                        case 6:
                                        case 'end':
                                            return _context10.stop();
                                    }
                                }
                            },
                            _callee10,
                            this
                        );
                    })
                );
                return _pack.apply(this, arguments);
            }
        }
    },
    './utility': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.parseStylus = parseStylus;
            exports.document = exports.meta = void 0;

            var _nodeToolkit = require('@tech_query/node-toolkit');

            var _jsdom = require('jsdom');

            var _stylus = _interopRequireDefault(require('stylus'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * `package.json` data of `process.cwd()`
             *
             * @type {Object}
             */

            var meta = ((0, _nodeToolkit.packageOf)('./test') || '').meta;
            /**
             * @type {Document}
             */

            exports.meta = meta;
            var document = new _jsdom.JSDOM().window.document;
            /**
             * @param {string} source
             * @param {Object} [option] - https://github.com/stylus/stylus/blob/HEAD/docs/js.md
             *
             * @return {Promise<string>} CSS source code
             */

            exports.document = document;

            function parseStylus(source) {
                var option =
                    arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {};
                return new Promise(function(resolve, reject) {
                    return _stylus.default.render(source, option, function(
                        error,
                        CSS
                    ) {
                        return error ? reject(error) : resolve(CSS);
                    });
                });
            }
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            var _nodeToolkit = require('@tech_query/node-toolkit');

            var _utility = require('./utility');

            var _commander = _interopRequireDefault(require('commander'));

            var _command = require('./command');

            var _puppeteerBrowser = _interopRequireDefault(
                require('puppeteer-browser')
            );

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var currentPackage = (0, _nodeToolkit.packageOf)(
                (0, _nodeToolkit.currentModulePath)()
            ).meta;
            var folder = _utility.meta ? _utility.meta.directories : '';

            function safePack(_x8) {
                return _safePack.apply(this, arguments);
            }

            function _safePack() {
                _safePack = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee12(exit) {
                        return _regenerator.default.wrap(
                            function _callee12$(_context12) {
                                while (1) {
                                    switch (
                                        (_context12.prev = _context12.next)
                                    ) {
                                        case 0:
                                            _context12.prev = 0;
                                            _context12.next = 3;
                                            return (0, _command.pack)(
                                                folder.lib
                                            );

                                        case 3:
                                            _context12.next = 9;
                                            break;

                                        case 5:
                                            _context12.prev = 5;
                                            _context12.t0 = _context12['catch'](
                                                0
                                            );
                                            console.error(_context12.t0);
                                            if (exit === true) process.exit(1);

                                        case 9:
                                        case 'end':
                                            return _context12.stop();
                                    }
                                }
                            },
                            _callee12,
                            this,
                            [[0, 5]]
                        );
                    })
                );
                return _safePack.apply(this, arguments);
            }

            _commander.default
                .version(currentPackage.version)
                .description(currentPackage.description)
                .command('boot', 'Boot current directory as a WebCell project')
                .on('command:boot', _command.boot)
                .command(
                    'pack',
                    'Bundle components to a package with JS modules in it'
                )
                .on('command:pack', safePack.bind(null, true))
                .command('preview', 'Real-time preview during development')
                .on(
                    'command:preview',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                        /*#__PURE__*/
                        _regenerator.default.mark(function _callee11() {
                            return _regenerator.default.wrap(
                                function _callee11$(_context11) {
                                    while (1) {
                                        switch (
                                            (_context11.prev = _context11.next)
                                        ) {
                                            case 0:
                                                _context11.next = 2;
                                                return safePack(true);

                                            case 2:
                                                _context11.next = 4;
                                                return _puppeteerBrowser.default.getPage(
                                                    '.',
                                                    folder.test || 'test/',
                                                    safePack
                                                );

                                            case 4:
                                            case 'end':
                                                return _context11.stop();
                                        }
                                    }
                                },
                                _callee11,
                                this
                            );
                        })
                    )
                )
                .parse(process.argv);
        }
    },
    'fs-extra': {
        exports: fs_extra
    },
    path: {
        exports: path
    },
    jsdom: {
        exports: jsdom
    },
    'amd-bundle': {
        exports: amd_bundle
    },
    less: {
        exports: less
    },
    sass: {
        exports: sass
    },
    '@tech_query/node-toolkit': {
        exports: _tech_query_node_toolkit
    },
    'simple-git/promise': {
        exports: simple_git_promise
    },
    'cross-spawn': {
        exports: cross_spawn
    },
    stylus: {
        exports: stylus
    },
    commander: {
        exports: commander
    },
    'puppeteer-browser': {
        exports: puppeteer_browser
    }
};

    return _include_('./index');
});