#! /usr/bin/env node

//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('web-cell', ["regenerator-runtime/runtime","fs-extra","path","amd-bundle","less","sass","web-cell/dist/polyfill","web-cell","@tech_query/node-toolkit","stylus","@babel/polyfill","commander","cross-spawn","puppeteer-browser"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('regenerator-runtime/runtime'),require('fs-extra'),require('path'),require('amd-bundle'),require('less'),require('sass'),require('web-cell/dist/polyfill'),require('web-cell'),require('@tech_query/node-toolkit'),require('stylus'),require('@babel/polyfill'),require('commander'),require('cross-spawn'),require('puppeteer-browser'));
    else
        return  this['web-cell'] = factory.call(self,this['regenerator-runtime/runtime'],this['fs-extra'],this['path'],this['amd-bundle'],this['less'],this['sass'],this['web-cell/dist/polyfill'],this['web-cell'],this['@tech_query/node-toolkit'],this['stylus'],this['@babel/polyfill'],this['commander'],this['cross-spawn'],this['puppeteer-browser']);

})(function (regenerator_runtime_runtime,fs_extra,path,amd_bundle,less,sass,web_cell_dist_polyfill,web_cell,_tech_query_node_toolkit,stylus,_babel_polyfill,commander,cross_spawn,puppeteer_browser) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

var _interopRequireDefault2 = require('@babel/runtime/helpers/interopRequireDefault');

var _slicedToArray2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/slicedToArray')
);

var _toConsumableArray2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/toConsumableArray')
);

var _regenerator = _interopRequireDefault2(
    require('@babel/runtime/regenerator')
);

var _asyncToGenerator2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/asyncToGenerator')
);

var _classCallCheck2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/classCallCheck')
);

var _createClass2 = _interopRequireDefault2(
    require('@babel/runtime/helpers/createClass')
);

var _module_ = {
    './Component': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.default = void 0;

            require('regenerator-runtime/runtime');

            var _fsExtra = require('fs-extra');

            var _path = require('path');

            var _amdBundle = _interopRequireDefault(require('amd-bundle'));

            var _less = _interopRequireDefault(require('less'));

            var SASS = _interopRequireWildcard(require('sass'));

            var _utility = require('./utility');

            require('web-cell/dist/polyfill');

            var _webCell = require('web-cell');

            var _nodeToolkit = require('@tech_query/node-toolkit');

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};

                    if (obj != null) {
                        for (var key in obj) {
                            if (
                                Object.prototype.hasOwnProperty.call(obj, key)
                            ) {
                                var desc =
                                    Object.defineProperty &&
                                    Object.getOwnPropertyDescriptor
                                        ? Object.getOwnPropertyDescriptor(
                                              obj,
                                              key
                                          )
                                        : {};

                                if (desc.get || desc.set) {
                                    Object.defineProperty(newObj, key, desc);
                                } else {
                                    newObj[key] = obj[key];
                                }
                            }
                        }
                    }

                    newObj.default = obj;
                    return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * Component packer
             */

            var Component =
                /*#__PURE__*/
                (function() {
                    /**
                     * @param {string} path - Component directory
                     */
                    function Component(path) {
                        (0, _classCallCheck2.default)(this, Component);
                        this.path = path;
                        this.name = (0, _path.basename)(path);
                        this.entry = (0, _path.join)(path, 'index');
                    }
                    /**
                     * @param {string} path
                     *
                     * @return {DocumentFragment}
                     */

                    (0, _createClass2.default)(
                        Component,
                        [
                            {
                                key: 'toHTML',

                                /**
                                 * @return {DocumentFragment} HTML version bundle of this component
                                 */
                                value: (function() {
                                    var _toHTML = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee() {
                                                var _fragment$querySelect;

                                                var fragment,
                                                    CSS,
                                                    _iteratorNormalCompletion,
                                                    _didIteratorError,
                                                    _iteratorError,
                                                    _iterator,
                                                    _step,
                                                    sheet,
                                                    style,
                                                    script;

                                                return _regenerator.default.wrap(
                                                    function _callee$(
                                                        _context
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context.prev =
                                                                    _context.next)
                                                            ) {
                                                                case 0:
                                                                    _context.next = 2;
                                                                    return Component.parseHTML(
                                                                        this
                                                                            .entry +
                                                                            '.html'
                                                                    );

                                                                case 2:
                                                                    fragment =
                                                                        _context.sent;
                                                                    CSS = [];
                                                                    _iteratorNormalCompletion = true;
                                                                    _didIteratorError = false;
                                                                    _iteratorError = undefined;
                                                                    _context.prev = 7;
                                                                    _iterator = Component.findStyle(
                                                                        fragment
                                                                    )[
                                                                        Symbol
                                                                            .iterator
                                                                    ]();

                                                                case 9:
                                                                    if (
                                                                        (_iteratorNormalCompletion = (_step = _iterator.next())
                                                                            .done)
                                                                    ) {
                                                                        _context.next = 21;
                                                                        break;
                                                                    }

                                                                    sheet =
                                                                        _step.value;
                                                                    _context.next = 13;
                                                                    return Component.parseCSS(
                                                                        sheet.textContent ||
                                                                            (0,
                                                                            _path.join)(
                                                                                this
                                                                                    .path,
                                                                                sheet.getAttribute(
                                                                                    'href'
                                                                                )
                                                                            ),
                                                                        sheet.type,
                                                                        this
                                                                            .entry +
                                                                            '.css'
                                                                    );

                                                                case 13:
                                                                    style =
                                                                        _context.sent;

                                                                    if (style) {
                                                                        _context.next = 16;
                                                                        break;
                                                                    }

                                                                    return _context.abrupt(
                                                                        'continue',
                                                                        18
                                                                    );

                                                                case 16:
                                                                    sheet.replaceWith(
                                                                        style
                                                                    );
                                                                    if (
                                                                        style.parentNode ===
                                                                        fragment
                                                                    )
                                                                        CSS.push(
                                                                            style
                                                                        );

                                                                case 18:
                                                                    _iteratorNormalCompletion = true;
                                                                    _context.next = 9;
                                                                    break;

                                                                case 21:
                                                                    _context.next = 27;
                                                                    break;

                                                                case 23:
                                                                    _context.prev = 23;
                                                                    _context.t0 = _context[
                                                                        'catch'
                                                                    ](7);
                                                                    _didIteratorError = true;
                                                                    _iteratorError =
                                                                        _context.t0;

                                                                case 27:
                                                                    _context.prev = 27;
                                                                    _context.prev = 28;

                                                                    if (
                                                                        !_iteratorNormalCompletion &&
                                                                        _iterator.return !=
                                                                            null
                                                                    ) {
                                                                        _iterator.return();
                                                                    }

                                                                case 30:
                                                                    _context.prev = 30;

                                                                    if (
                                                                        !_didIteratorError
                                                                    ) {
                                                                        _context.next = 33;
                                                                        break;
                                                                    }

                                                                    throw _iteratorError;

                                                                case 33:
                                                                    return _context.finish(
                                                                        30
                                                                    );

                                                                case 34:
                                                                    return _context.finish(
                                                                        27
                                                                    );

                                                                case 35:
                                                                    (_fragment$querySelect = fragment.querySelector(
                                                                        'template'
                                                                    )
                                                                        .content).prepend.apply(
                                                                        _fragment$querySelect,
                                                                        CSS
                                                                    );

                                                                    script = fragment.querySelector(
                                                                        'script'
                                                                    );
                                                                    if (script)
                                                                        script.replaceWith(
                                                                            Component.parseJS(
                                                                                (0,
                                                                                _path.join)(
                                                                                    this
                                                                                        .path,
                                                                                    script.getAttribute(
                                                                                        'src'
                                                                                    )
                                                                                )
                                                                            )
                                                                        );
                                                                    return _context.abrupt(
                                                                        'return',
                                                                        fragment
                                                                    );

                                                                case 39:
                                                                case 'end':
                                                                    return _context.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee,
                                                    this,
                                                    [
                                                        [7, 23, 27, 35],
                                                        [28, , 30, 34]
                                                    ]
                                                );
                                            }
                                        )
                                    );

                                    return function toHTML() {
                                        return _toHTML.apply(this, arguments);
                                    };
                                })()
                                /**
                                 * @protected
                                 *
                                 * @param {String} file - File path
                                 *
                                 * @return {String} Legal ECMAScript source code
                                 */
                            },
                            {
                                key: 'assetOf',
                                value: (function() {
                                    var _assetOf = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee2(file) {
                                                return _regenerator.default.wrap(
                                                    function _callee2$(
                                                        _context2
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context2.prev =
                                                                    _context2.next)
                                                            ) {
                                                                case 0:
                                                                    _context2.t0 = (0,
                                                                    _path.extname)(
                                                                        file
                                                                    ).slice(1);
                                                                    _context2.next =
                                                                        _context2.t0 ===
                                                                        'html'
                                                                            ? 3
                                                                            : _context2.t0 ===
                                                                              'css'
                                                                                ? 9
                                                                                : _context2.t0 ===
                                                                                  'less'
                                                                                    ? 9
                                                                                    : _context2.t0 ===
                                                                                      'sass'
                                                                                        ? 9
                                                                                        : _context2.t0 ===
                                                                                          'scss'
                                                                                            ? 9
                                                                                            : _context2.t0 ===
                                                                                              'stylus'
                                                                                                ? 9
                                                                                                : _context2.t0 ===
                                                                                                  'js'
                                                                                                    ? 13
                                                                                                    : _context2.t0 ===
                                                                                                      'json'
                                                                                                        ? 14
                                                                                                        : 18;
                                                                    break;

                                                                case 3:
                                                                    _context2.t1 = (0,
                                                                    _webCell.stringifyDOM);
                                                                    _context2.next = 6;
                                                                    return this.toHTML();

                                                                case 6:
                                                                    _context2.t2 =
                                                                        _context2.sent;
                                                                    file = (0,
                                                                    _context2.t1)(
                                                                        _context2.t2
                                                                    );
                                                                    return _context2.abrupt(
                                                                        'break',
                                                                        19
                                                                    );

                                                                case 9:
                                                                    _context2.next = 11;
                                                                    return Component.parseCSS(
                                                                        file
                                                                    );

                                                                case 11:
                                                                    file =
                                                                        _context2
                                                                            .sent
                                                                            .textContent;
                                                                    return _context2.abrupt(
                                                                        'break',
                                                                        19
                                                                    );

                                                                case 13:
                                                                    return _context2.abrupt(
                                                                        'return'
                                                                    );

                                                                case 14:
                                                                    _context2.next = 16;
                                                                    return (0,
                                                                    _fsExtra.readFile)(
                                                                        file
                                                                    );

                                                                case 16:
                                                                    _context2.t3 =
                                                                        _context2.sent;
                                                                    return _context2.abrupt(
                                                                        'return',
                                                                        _context2.t3 +
                                                                            ''
                                                                    );

                                                                case 18:
                                                                    file = (0,
                                                                    _nodeToolkit.toDataURI)(
                                                                        file
                                                                    );

                                                                case 19:
                                                                    return _context2.abrupt(
                                                                        'return',
                                                                        JSON.stringify(
                                                                            file
                                                                        )
                                                                    );

                                                                case 20:
                                                                case 'end':
                                                                    return _context2.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee2,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function assetOf(_x) {
                                        return _assetOf.apply(this, arguments);
                                    };
                                })()
                                /**
                                 * @return {string} JS version bundle of this component
                                 */
                            },
                            {
                                key: 'toJS',
                                value: (function() {
                                    var _toJS = (0, _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee3() {
                                                var temp_file,
                                                    _iteratorNormalCompletion2,
                                                    _didIteratorError2,
                                                    _iteratorError2,
                                                    _iterator2,
                                                    _step2,
                                                    file,
                                                    temp,
                                                    source;

                                                return _regenerator.default.wrap(
                                                    function _callee3$(
                                                        _context3
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context3.prev =
                                                                    _context3.next)
                                                            ) {
                                                                case 0:
                                                                    temp_file = [];
                                                                    _iteratorNormalCompletion2 = true;
                                                                    _didIteratorError2 = false;
                                                                    _iteratorError2 = undefined;
                                                                    _context3.prev = 4;
                                                                    _context3.next = 7;
                                                                    return (0,
                                                                    _fsExtra.readdir)(
                                                                        this
                                                                            .path
                                                                    );

                                                                case 7:
                                                                    _context3.t0 =
                                                                        Symbol.iterator;
                                                                    _iterator2 = _context3.sent[
                                                                        _context3
                                                                            .t0
                                                                    ]();

                                                                case 9:
                                                                    if (
                                                                        (_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
                                                                            .done)
                                                                    ) {
                                                                        _context3.next = 26;
                                                                        break;
                                                                    }

                                                                    file =
                                                                        _step2.value;
                                                                    file = (0,
                                                                    _path.join)(
                                                                        this
                                                                            .path,
                                                                        file
                                                                    );

                                                                    if (
                                                                        (0,
                                                                        _fsExtra.statSync)(
                                                                            file
                                                                        ).isFile()
                                                                    ) {
                                                                        _context3.next = 14;
                                                                        break;
                                                                    }

                                                                    return _context3.abrupt(
                                                                        'continue',
                                                                        23
                                                                    );

                                                                case 14:
                                                                    temp = ''.concat(
                                                                        file,
                                                                        '.js'
                                                                    );
                                                                    _context3.next = 17;
                                                                    return this.assetOf(
                                                                        file
                                                                    );

                                                                case 17:
                                                                    file =
                                                                        _context3.sent;

                                                                    if (
                                                                        file !=
                                                                        null
                                                                    ) {
                                                                        _context3.next = 20;
                                                                        break;
                                                                    }

                                                                    return _context3.abrupt(
                                                                        'continue',
                                                                        23
                                                                    );

                                                                case 20:
                                                                    temp_file.push(
                                                                        temp
                                                                    );
                                                                    _context3.next = 23;
                                                                    return (0,
                                                                    _fsExtra.outputFile)(
                                                                        temp,
                                                                        'export default '.concat(
                                                                            file
                                                                        )
                                                                    );

                                                                case 23:
                                                                    _iteratorNormalCompletion2 = true;
                                                                    _context3.next = 9;
                                                                    break;

                                                                case 26:
                                                                    _context3.next = 32;
                                                                    break;

                                                                case 28:
                                                                    _context3.prev = 28;
                                                                    _context3.t1 = _context3[
                                                                        'catch'
                                                                    ](4);
                                                                    _didIteratorError2 = true;
                                                                    _iteratorError2 =
                                                                        _context3.t1;

                                                                case 32:
                                                                    _context3.prev = 32;
                                                                    _context3.prev = 33;

                                                                    if (
                                                                        !_iteratorNormalCompletion2 &&
                                                                        _iterator2.return !=
                                                                            null
                                                                    ) {
                                                                        _iterator2.return();
                                                                    }

                                                                case 35:
                                                                    _context3.prev = 35;

                                                                    if (
                                                                        !_didIteratorError2
                                                                    ) {
                                                                        _context3.next = 38;
                                                                        break;
                                                                    }

                                                                    throw _iteratorError2;

                                                                case 38:
                                                                    return _context3.finish(
                                                                        35
                                                                    );

                                                                case 39:
                                                                    return _context3.finish(
                                                                        32
                                                                    );

                                                                case 40:
                                                                    source = Component.packJS(
                                                                        this
                                                                            .entry +
                                                                            '.js'
                                                                    );
                                                                    _context3.next = 43;
                                                                    return Promise.all(
                                                                        temp_file.map(
                                                                            function(
                                                                                file
                                                                            ) {
                                                                                return (0,
                                                                                _fsExtra.remove)(
                                                                                    file
                                                                                );
                                                                            }
                                                                        )
                                                                    );

                                                                case 43:
                                                                    return _context3.abrupt(
                                                                        'return',
                                                                        source
                                                                    );

                                                                case 44:
                                                                case 'end':
                                                                    return _context3.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee3,
                                                    this,
                                                    [
                                                        [4, 28, 32, 40],
                                                        [33, , 35, 39]
                                                    ]
                                                );
                                            }
                                        )
                                    );

                                    return function toJS() {
                                        return _toJS.apply(this, arguments);
                                    };
                                })()
                            }
                        ],
                        [
                            {
                                key: 'parseHTML',
                                value: (function() {
                                    var _parseHTML = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee4(path) {
                                                var box, fragment;
                                                return _regenerator.default.wrap(
                                                    function _callee4$(
                                                        _context4
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context4.prev =
                                                                    _context4.next)
                                                            ) {
                                                                case 0:
                                                                    (box = document.createElement(
                                                                        'div'
                                                                    )),
                                                                        (fragment = document.createDocumentFragment());
                                                                    _context4.next = 3;
                                                                    return (0,
                                                                    _fsExtra.readFile)(
                                                                        path
                                                                    );

                                                                case 3:
                                                                    _context4.t0 =
                                                                        _context4.sent;
                                                                    box.innerHTML =
                                                                        _context4.t0 +
                                                                        '';
                                                                    fragment.append.apply(
                                                                        fragment,
                                                                        (0,
                                                                        _toConsumableArray2.default)(
                                                                            box.childNodes
                                                                        )
                                                                    );
                                                                    return _context4.abrupt(
                                                                        'return',
                                                                        fragment
                                                                    );

                                                                case 7:
                                                                case 'end':
                                                                    return _context4.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee4,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function parseHTML(_x2) {
                                        return _parseHTML.apply(
                                            this,
                                            arguments
                                        );
                                    };
                                })()
                                /**
                                 * @param {string}  source - File path or Style source code
                                 * @param {?string} type   - MIME type
                                 * @param {string}  [base] - Path of the file which `@import` located in
                                 *
                                 * @return {?Element} Style element
                                 */
                            },
                            {
                                key: 'parseCSS',
                                value: (function() {
                                    var _parseCSS = (0,
                                    _asyncToGenerator2.default)(
                                        /*#__PURE__*/
                                        _regenerator.default.mark(
                                            function _callee5(
                                                source,
                                                type,
                                                base
                                            ) {
                                                var style, paths;
                                                return _regenerator.default.wrap(
                                                    function _callee5$(
                                                        _context5
                                                    ) {
                                                        while (1) {
                                                            switch (
                                                                (_context5.prev =
                                                                    _context5.next)
                                                            ) {
                                                                case 0:
                                                                    type = type
                                                                        ? type.split(
                                                                              '/'
                                                                          )[1]
                                                                        : (0,
                                                                          _path.extname)(
                                                                              source
                                                                          ).slice(
                                                                              1
                                                                          );

                                                                    if (
                                                                        source.includes(
                                                                            '\n'
                                                                        )
                                                                    ) {
                                                                        _context5.next = 6;
                                                                        break;
                                                                    }

                                                                    _context5.next = 4;
                                                                    return (0,
                                                                    _fsExtra.readFile)(
                                                                        (base = source)
                                                                    );

                                                                case 4:
                                                                    _context5.t0 =
                                                                        _context5.sent;
                                                                    source =
                                                                        _context5.t0 +
                                                                        '';

                                                                case 6:
                                                                    paths = [
                                                                        (0,
                                                                        _path.dirname)(
                                                                            base
                                                                        )
                                                                    ];
                                                                    _context5.t1 = type;
                                                                    _context5.next =
                                                                        _context5.t1 ===
                                                                        'css'
                                                                            ? 10
                                                                            : _context5.t1 ===
                                                                              'sass'
                                                                                ? 12
                                                                                : _context5.t1 ===
                                                                                  'scss'
                                                                                    ? 12
                                                                                    : _context5.t1 ===
                                                                                      'less'
                                                                                        ? 14
                                                                                        : _context5.t1 ===
                                                                                          'stylus'
                                                                                            ? 18
                                                                                            : 21;
                                                                    break;

                                                                case 10:
                                                                    style = source;
                                                                    return _context5.abrupt(
                                                                        'break',
                                                                        21
                                                                    );

                                                                case 12:
                                                                    style = SASS.renderSync(
                                                                        {
                                                                            data: source,
                                                                            includePaths: paths
                                                                        }
                                                                    ).css;
                                                                    return _context5.abrupt(
                                                                        'break',
                                                                        21
                                                                    );

                                                                case 14:
                                                                    _context5.next = 16;
                                                                    return _less.default.render(
                                                                        source,
                                                                        {
                                                                            paths: paths
                                                                        }
                                                                    );

                                                                case 16:
                                                                    style =
                                                                        _context5
                                                                            .sent
                                                                            .css;
                                                                    return _context5.abrupt(
                                                                        'break',
                                                                        21
                                                                    );

                                                                case 18:
                                                                    _context5.next = 20;
                                                                    return (0,
                                                                    _utility.parseStylus)(
                                                                        source,
                                                                        {
                                                                            paths: paths
                                                                        }
                                                                    );

                                                                case 20:
                                                                    style =
                                                                        _context5.sent;

                                                                case 21:
                                                                    return _context5.abrupt(
                                                                        'return',
                                                                        style &&
                                                                            Object.assign(
                                                                                document.createElement(
                                                                                    'style'
                                                                                ),
                                                                                {
                                                                                    textContent: style
                                                                                }
                                                                            )
                                                                    );

                                                                case 22:
                                                                case 'end':
                                                                    return _context5.stop();
                                                            }
                                                        }
                                                    },
                                                    _callee5,
                                                    this
                                                );
                                            }
                                        )
                                    );

                                    return function parseCSS(_x3, _x4, _x5) {
                                        return _parseCSS.apply(this, arguments);
                                    };
                                })()
                                /**
                                 * @param {DocumentFragment} fragment
                                 *
                                 * @return {Element[]}
                                 */
                            },
                            {
                                key: 'findStyle',
                                value: function findStyle(fragment) {
                                    var _ref;

                                    return (0, _webCell.$)(
                                        'link[rel="stylesheet"]',
                                        fragment
                                    ).concat(
                                        (_ref = []).concat.apply(
                                            _ref,
                                            (0, _toConsumableArray2.default)(
                                                (0, _webCell.$)(
                                                    'template',
                                                    fragment
                                                ).map(function(template) {
                                                    return (0,
                                                    _webCell.$)('style', template.content);
                                                })
                                            )
                                        )
                                    );
                                }
                                /**
                                 * @param {string} tagName
                                 *
                                 * @return {string}
                                 */
                            },
                            {
                                key: 'identifierOf',
                                value: function identifierOf(tagName) {
                                    return (
                                        tagName[0].toUpperCase() +
                                        tagName
                                            .replace(/-(\w)/g, function(
                                                _,
                                                char
                                            ) {
                                                return char.toUpperCase();
                                            })
                                            .slice(1)
                                    );
                                }
                                /**
                                 * @param {String} path - Full name of a JS file
                                 *
                                 * @return {String} Packed JS source code
                                 */
                            },
                            {
                                key: 'packJS',
                                value: function packJS(path) {
                                    var single_entry = (0, _path.join)(
                                        (0, _utility.folderOf)().lib || '',
                                        'index.js'
                                    );
                                    var name =
                                        path === single_entry &&
                                        (0, _utility.metaOf)().name;
                                    path = path
                                        .split('.')
                                        .slice(0, -1)
                                        .join('.');
                                    return new _amdBundle.default(path).bundle(
                                        name ||
                                            (0, _path.basename)(
                                                (0, _path.dirname)(path)
                                            )
                                    );
                                }
                                /**
                                 * @param {string} path
                                 *
                                 * @return {Element}
                                 */
                            },
                            {
                                key: 'parseJS',
                                value: function parseJS(path) {
                                    return Object.assign(
                                        document.createElement('script'),
                                        {
                                            text: '\n'.concat(
                                                this.packJS(path),
                                                '\n'
                                            )
                                        }
                                    );
                                }
                            }
                        ]
                    );
                    return Component;
                })();

            exports.default = Component;
        }
    },
    './command': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.bundle = bundle;
            exports.pack = pack;

            var _path = require('path');

            var _fsExtra = require('fs-extra');

            var _Component = _interopRequireDefault(require('./Component'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * Bundle components to JS modules
             *
             * @param {string} path - Source directory
             *
             * @return {string[]} Component paths
             */

            function bundle(_x6) {
                return _bundle.apply(this, arguments);
            }
            /**
             * Bundle components into a JS package
             *
             * @param {string} path - Source directory
             *
             * @return {string[]} Component paths
             */

            function _bundle() {
                _bundle = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee6(path) {
                        var _result;

                        var result, component;
                        return _regenerator.default.wrap(
                            function _callee6$(_context6) {
                                while (1) {
                                    switch ((_context6.prev = _context6.next)) {
                                        case 0:
                                            result = [];

                                            if (
                                                !(0, _fsExtra.existsSync)(
                                                    (0, _path.join)(
                                                        path,
                                                        'index.js'
                                                    )
                                                )
                                            ) {
                                                _context6.next = 11;
                                                break;
                                            }

                                            component = new _Component.default(
                                                path
                                            );
                                            result[0] = 'dist/'.concat(
                                                component.name,
                                                '.js'
                                            );
                                            _context6.t0 = (0,
                                            _fsExtra.outputFile);
                                            _context6.t1 = result[0];
                                            _context6.next = 8;
                                            return component.toJS();

                                        case 8:
                                            _context6.t2 = _context6.sent;
                                            _context6.next = 11;
                                            return (0, _context6.t0)(
                                                _context6.t1,
                                                _context6.t2
                                            );

                                        case 11:
                                            if (
                                                !(0, _fsExtra.statSync)(
                                                    path
                                                ).isDirectory()
                                            ) {
                                                _context6.next = 25;
                                                break;
                                            }

                                            _context6.t3 = (_result = result).concat;
                                            _context6.t4 = _result;
                                            _context6.t5 =
                                                _toConsumableArray2.default;
                                            _context6.t6 = Promise;
                                            _context6.next = 18;
                                            return (0, _fsExtra.readdir)(path);

                                        case 18:
                                            _context6.t7 = function(file) {
                                                return bundle(
                                                    (0, _path.join)(path, file)
                                                );
                                            };

                                            _context6.t8 = _context6.sent.map(
                                                _context6.t7
                                            );
                                            _context6.next = 22;
                                            return _context6.t6.all.call(
                                                _context6.t6,
                                                _context6.t8
                                            );

                                        case 22:
                                            _context6.t9 = _context6.sent;
                                            _context6.t10 = (0, _context6.t5)(
                                                _context6.t9
                                            );
                                            result = _context6.t3.apply.call(
                                                _context6.t3,
                                                _context6.t4,
                                                _context6.t10
                                            );

                                        case 25:
                                            return _context6.abrupt(
                                                'return',
                                                result
                                            );

                                        case 26:
                                        case 'end':
                                            return _context6.stop();
                                    }
                                }
                            },
                            _callee6,
                            this
                        );
                    })
                );
                return _bundle.apply(this, arguments);
            }

            function pack(_x7) {
                return _pack.apply(this, arguments);
            }

            function _pack() {
                _pack = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee7(path) {
                        var file;
                        return _regenerator.default.wrap(
                            function _callee7$(_context7) {
                                while (1) {
                                    switch ((_context7.prev = _context7.next)) {
                                        case 0:
                                            _context7.next = 2;
                                            return bundle(path);

                                        case 2:
                                            file = _context7.sent;
                                            _context7.next = 5;
                                            return (0, _fsExtra.outputFile)(
                                                'dist/index.js',
                                                file
                                                    .map(function(item) {
                                                        item = (0,
                                                        _path.basename)(item);
                                                        console.info(
                                                            '\u221A Component "'.concat(
                                                                item,
                                                                '" is packed in'
                                                            )
                                                        );
                                                        return "export * from './".concat(
                                                            item,
                                                            "';"
                                                        );
                                                    })
                                                    .join('\n')
                                            );

                                        case 5:
                                            return _context7.abrupt(
                                                'return',
                                                file
                                            );

                                        case 6:
                                        case 'end':
                                            return _context7.stop();
                                    }
                                }
                            },
                            _callee7,
                            this
                        );
                    })
                );
                return _pack.apply(this, arguments);
            }
        }
    },
    './utility': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.parseStylus = parseStylus;
            exports.folderOf = exports.metaOf = void 0;

            var _nodeToolkit = require('@tech_query/node-toolkit');

            var _stylus = _interopRequireDefault(require('stylus'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * Get `package.json` data of `path` or `process.cwd()`
             *
             * @type {function(path: ?String): Object}
             */

            var metaOf = (0, _nodeToolkit.cache)(function(path) {
                return (
                    ((0, _nodeToolkit.packageOf)(path || './test') || '')
                        .meta || {}
                );
            });
            /**
             * Get `directories` field of `package.json` in `path` or `process.cwd()`
             *
             * @type {function(path: ?String): Object}
             */

            exports.metaOf = metaOf;
            var folderOf = (0, _nodeToolkit.cache)(function(path) {
                return (metaOf(path) || '').directories || {};
            });
            /**
             * @param {string} source
             * @param {Object} [option] - https://github.com/stylus/stylus/blob/HEAD/docs/js.md
             *
             * @return {Promise<string>} CSS source code
             */

            exports.folderOf = folderOf;

            function parseStylus(source) {
                var option =
                    arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {};
                return new Promise(function(resolve, reject) {
                    return _stylus.default.render(source, option, function(
                        error,
                        CSS
                    ) {
                        return error ? reject(error) : resolve(CSS);
                    });
                });
            }
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            require('@babel/polyfill');

            var _nodeToolkit = require('@tech_query/node-toolkit');

            var _utility = require('./utility');

            var _commander = _interopRequireDefault(require('commander'));

            var _command = require('./command');

            var _crossSpawn = _interopRequireDefault(require('cross-spawn'));

            var _puppeteerBrowser = _interopRequireDefault(
                require('puppeteer-browser')
            );

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }

            var currentPackage = (0, _utility.metaOf)(
                    (0, _nodeToolkit.currentModulePath)()
                ),
                folder = (0, _utility.folderOf)();

            function safePack(_x8) {
                return _safePack.apply(this, arguments);
            }

            function _safePack() {
                _safePack = (0, _asyncToGenerator2.default)(
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee9(exit) {
                        return _regenerator.default.wrap(
                            function _callee9$(_context9) {
                                while (1) {
                                    switch ((_context9.prev = _context9.next)) {
                                        case 0:
                                            _context9.prev = 0;
                                            _context9.next = 3;
                                            return (0, _command.pack)(
                                                folder.lib
                                            );

                                        case 3:
                                            _context9.next = 9;
                                            break;

                                        case 5:
                                            _context9.prev = 5;
                                            _context9.t0 = _context9['catch'](
                                                0
                                            );
                                            console.error(_context9.t0);
                                            if (exit === true) process.exit(1);

                                        case 9:
                                        case 'end':
                                            return _context9.stop();
                                    }
                                }
                            },
                            _callee9,
                            this,
                            [[0, 5]]
                        );
                    })
                );
                return _safePack.apply(this, arguments);
            }

            _commander.default
                .version(currentPackage.version)
                .description(currentPackage.description)
                .command('boot [path]', 'Boot a directory as a WebCell project')
                .on('command:boot', function(_ref2) {
                    var _ref3 = (0, _slicedToArray2.default)(_ref2, 1),
                        path = _ref3[0];

                    return (0,
                    _crossSpawn.default)('npm', ['init', 'web-cell', path], {
                        stdio: 'inherit'
                    });
                })
                .command(
                    'pack',
                    'Bundle components to a package with JS modules in it'
                )
                .on('command:pack', safePack.bind(null, true))
                .command('preview', 'Real-time preview during development')
                .on(
                    'command:preview',
                    /*#__PURE__*/
                    (0, _asyncToGenerator2.default)(
                        /*#__PURE__*/
                        _regenerator.default.mark(function _callee8() {
                            return _regenerator.default.wrap(
                                function _callee8$(_context8) {
                                    while (1) {
                                        switch (
                                            (_context8.prev = _context8.next)
                                        ) {
                                            case 0:
                                                _context8.next = 2;
                                                return safePack(true);

                                            case 2:
                                                _context8.next = 4;
                                                return _puppeteerBrowser.default.getPage(
                                                    '.',
                                                    folder.test || 'test/',
                                                    safePack
                                                );

                                            case 4:
                                            case 'end':
                                                return _context8.stop();
                                        }
                                    }
                                },
                                _callee8,
                                this
                            );
                        })
                    )
                )
                .parse(process.argv);
        }
    },
    'regenerator-runtime/runtime': {
        exports: regenerator_runtime_runtime
    },
    'fs-extra': {
        exports: fs_extra
    },
    path: {
        exports: path
    },
    'amd-bundle': {
        exports: amd_bundle
    },
    less: {
        exports: less
    },
    sass: {
        exports: sass
    },
    'web-cell/dist/polyfill': {
        exports: web_cell_dist_polyfill
    },
    'web-cell': {
        exports: web_cell
    },
    '@tech_query/node-toolkit': {
        exports: _tech_query_node_toolkit
    },
    stylus: {
        exports: stylus
    },
    '@babel/polyfill': {
        exports: _babel_polyfill
    },
    commander: {
        exports: commander
    },
    'cross-spawn': {
        exports: cross_spawn
    },
    'puppeteer-browser': {
        exports: puppeteer_browser
    }
};

    return _include_('./index');
});