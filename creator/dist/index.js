#! /usr/bin/env node

//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('index', ["fs-extra","path","@tech_query/node-toolkit","regenerator-runtime/runtime","web-cell/dist/polyfill","web-cell","simple-git/promise","cross-spawn","@babel/polyfill"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('fs-extra'),require('path'),require('@tech_query/node-toolkit'),require('regenerator-runtime/runtime'),require('web-cell/dist/polyfill'),require('web-cell'),require('simple-git/promise'),require('cross-spawn'),require('@babel/polyfill'));
    else
        return  this['index'] = factory.call(self,this['fs-extra'],this['path'],this['@tech_query/node-toolkit'],this['regenerator-runtime/runtime'],this['web-cell/dist/polyfill'],this['web-cell'],this['simple-git/promise'],this['cross-spawn'],this['@babel/polyfill']);

})(function (fs_extra,path,_tech_query_node_toolkit,regenerator_runtime_runtime,web_cell_dist_polyfill,web_cell,simple_git_promise,cross_spawn,_babel_polyfill) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'next',
                    value
                );
            }
            function _throw(err) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'throw',
                    err
                );
            }
            _next(undefined);
        });
    };
}

var _module_ = {
    './core': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, '__esModule', {
                value: true
            });
            exports.copyFrom = copyFrom;
            exports.upgradeHTML = upgradeHTML;
            exports.boot = boot;

            var _fsExtra = require('fs-extra');

            var _path = require('path');

            var _nodeToolkit = require('@tech_query/node-toolkit');

            require('regenerator-runtime/runtime');

            require('web-cell/dist/polyfill');

            var _webCell = require('web-cell');

            var _promise = _interopRequireDefault(
                require('simple-git/promise')
            );

            var _crossSpawn = _interopRequireDefault(require('cross-spawn'));

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule
                    ? obj
                    : {
                          default: obj
                      };
            }
            /**
             * @param {String} folder
             * @param {String} [cwd='.']
             */

            function copyFrom(_x) {
                return _copyFrom.apply(this, arguments);
            }

            function _copyFrom() {
                _copyFrom = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee(folder) {
                        var cwd,
                            _iteratorNormalCompletion,
                            _didIteratorError,
                            _iteratorError,
                            _iterator,
                            _step,
                            file,
                            source,
                            target,
                            type,
                            _args = arguments;

                        return regeneratorRuntime.wrap(
                            function _callee$(_context) {
                                while (1) {
                                    switch ((_context.prev = _context.next)) {
                                        case 0:
                                            cwd =
                                                _args.length > 1 &&
                                                _args[1] !== undefined
                                                    ? _args[1]
                                                    : '.';
                                            _iteratorNormalCompletion = true;
                                            _didIteratorError = false;
                                            _iteratorError = undefined;
                                            _context.prev = 4;
                                            _context.next = 7;
                                            return (0, _fsExtra.readdir)(
                                                folder
                                            );

                                        case 7:
                                            _context.t0 = Symbol.iterator;
                                            _iterator = _context.sent[
                                                _context.t0
                                            ]();

                                        case 9:
                                            if (
                                                (_iteratorNormalCompletion = (_step = _iterator.next())
                                                    .done)
                                            ) {
                                                _context.next = 37;
                                                break;
                                            }

                                            file = _step.value;
                                            (source = (0, _path.join)(
                                                folder,
                                                file
                                            )),
                                                (target = (0, _path.join)(
                                                    cwd,
                                                    file
                                                )),
                                                (type = 'Skip');

                                            if (
                                                (0, _fsExtra.existsSync)(target)
                                            ) {
                                                _context.next = 18;
                                                break;
                                            }

                                            _context.next = 15;
                                            return (0, _fsExtra.copy)(
                                                source,
                                                target
                                            );

                                        case 15:
                                            type = 'Create';
                                            _context.next = 33;
                                            break;

                                        case 18:
                                            if (
                                                !(
                                                    (0, _path.extname)(file) ===
                                                    '.json'
                                                )
                                            ) {
                                                _context.next = 33;
                                                break;
                                            }

                                            _context.t1 = (0,
                                            _fsExtra.outputJSON);
                                            _context.t2 = target;
                                            _context.t3 = (0,
                                            _nodeToolkit.patch);
                                            _context.next = 24;
                                            return (0, _fsExtra.readJSON)(
                                                target
                                            );

                                        case 24:
                                            _context.t4 = _context.sent;
                                            _context.next = 27;
                                            return (0, _fsExtra.readJSON)(
                                                source
                                            );

                                        case 27:
                                            _context.t5 = _context.sent;
                                            _context.t6 = (0, _context.t3)(
                                                _context.t4,
                                                _context.t5
                                            );
                                            _context.t7 = {
                                                spaces: 4
                                            };
                                            _context.next = 32;
                                            return (0, _context.t1)(
                                                _context.t2,
                                                _context.t6,
                                                _context.t7
                                            );

                                        case 32:
                                            type = 'Update';

                                        case 33:
                                            console.info(
                                                ''
                                                    .concat(
                                                        type.padEnd(6),
                                                        ' --> '
                                                    )
                                                    .concat(target)
                                            );

                                        case 34:
                                            _iteratorNormalCompletion = true;
                                            _context.next = 9;
                                            break;

                                        case 37:
                                            _context.next = 43;
                                            break;

                                        case 39:
                                            _context.prev = 39;
                                            _context.t8 = _context['catch'](4);
                                            _didIteratorError = true;
                                            _iteratorError = _context.t8;

                                        case 43:
                                            _context.prev = 43;
                                            _context.prev = 44;

                                            if (
                                                !_iteratorNormalCompletion &&
                                                _iterator.return != null
                                            ) {
                                                _iterator.return();
                                            }

                                        case 46:
                                            _context.prev = 46;

                                            if (!_didIteratorError) {
                                                _context.next = 49;
                                                break;
                                            }

                                            throw _iteratorError;

                                        case 49:
                                            return _context.finish(46);

                                        case 50:
                                            return _context.finish(43);

                                        case 51:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            },
                            _callee,
                            this,
                            [[4, 39, 43, 51], [44, , 46, 50]]
                        );
                    })
                );
                return _copyFrom.apply(this, arguments);
            }

            var tagAttribute = {
                    script: {
                        key: 'src',
                        kind: 'js'
                    },
                    link: {
                        key: 'href',
                        kind: 'css'
                    }
                },
                library = [
                    {
                        name: '@babel/polyfill',
                        file: 'polyfill',
                        path: 'dist/',
                        type: 'script'
                    },
                    {
                        name: 'whatwg-fetch',
                        file: 'fetch.umd',
                        path: 'dist/',
                        type: 'script'
                    },
                    {
                        name: '@webcomponents/webcomponentsjs',
                        file: 'webcomponents-bundle',
                        type: 'script'
                    },
                    {
                        name: '@webcomponents/webcomponentsjs',
                        file: 'custom-elements-es5-adapter',
                        type: 'script'
                    },
                    {
                        name: 'web-cell',
                        path: 'dist/',
                        type: 'script'
                    }
                ];

            function equalLibrary(element, type, key, name, file) {
                var URI = element[key];
                return (
                    element.tagName.toLowerCase() === type &&
                    URI.includes(name) &&
                    URI.includes(file)
                );
            }
            /**
             * @param {String} code - HTML source
             *
             * @return {Document}
             */

            function upgradeHTML(code) {
                var page = new DOMParser().parseFromString(code, 'text/html');
                var list = (0, _webCell.$)(Object.keys(tagAttribute), page);

                var _loop = function _loop() {
                    var _library$_i = library[_i],
                        type = _library$_i.type,
                        name = _library$_i.name,
                        file = _library$_i.file,
                        path = _library$_i.path;
                    file = file || name;
                    var _tagAttribute$type = tagAttribute[type];
                    key = _tagAttribute$type.key;
                    kind = _tagAttribute$type.kind;

                    if (
                        !(element = list.find(function(item) {
                            return equalLibrary(item, type, key, name, file);
                        }))
                    ) {
                        element = page.createElement(type);
                        element[key] = 'node_modules/'
                            .concat(name, '/')
                            .concat(path || '')
                            .concat(file)
                            .concat(/\.[^/]+$/.test(file) ? '' : '.min', '.')
                            .concat(kind);
                        if (type === 'link') element.rel = 'stylesheet';
                    }

                    page.head.append('    ', element, '\n');
                };

                for (var _i = 0; _i < library.length; _i++) {
                    var element, key, kind;

                    _loop();
                }

                return page;
            }

            var Git_ignore =
                '# Node.JS\nnode_modules/\n\n# IDE\n.vscode/\n.idea/\n\n# Online platform\n.github/\n\n# OS\n.DS_Store';
            /**
             * Boot a directory as a WebCell project
             *
             * @param {String} [cwd='.'] - Current working directory
             */

            function boot() {
                return _boot.apply(this, arguments);
            }

            function _boot() {
                _boot = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee2() {
                        var cwd,
                            git,
                            entry,
                            _args2 = arguments;
                        return regeneratorRuntime.wrap(
                            function _callee2$(_context2) {
                                while (1) {
                                    switch ((_context2.prev = _context2.next)) {
                                        case 0:
                                            cwd =
                                                _args2.length > 0 &&
                                                _args2[0] !== undefined
                                                    ? _args2[0]
                                                    : '.';
                                            console.time('Boot project');
                                            git = (0, _promise.default)(cwd);
                                            _context2.next = 5;
                                            return git.checkIsRepo();

                                        case 5:
                                            if (_context2.sent) {
                                                _context2.next = 8;
                                                break;
                                            }

                                            _context2.next = 8;
                                            return git.init();

                                        case 8:
                                            (0, _crossSpawn.default)(
                                                'npm',
                                                ['init', '-y'],
                                                {
                                                    stdio: 'inherit',
                                                    cwd: cwd
                                                }
                                            );
                                            _context2.next = 11;
                                            return copyFrom(
                                                (0, _path.join)(
                                                    (0,
                                                    _nodeToolkit.currentModulePath)(),
                                                    '../../template'
                                                ),
                                                cwd
                                            );

                                        case 11:
                                            entry = (0, _path.join)(
                                                cwd,
                                                'index.html'
                                            );
                                            _context2.t0 = (0,
                                            _fsExtra.outputFile);
                                            _context2.t1 = entry;
                                            _context2.t2 = (0,
                                            _webCell.stringifyDOM);
                                            _context2.t3 = upgradeHTML;
                                            _context2.next = 18;
                                            return (0, _fsExtra.readFile)(
                                                entry
                                            );

                                        case 18:
                                            _context2.t4 = _context2.sent;
                                            _context2.t5 = (0, _context2.t3)(
                                                _context2.t4
                                            );
                                            _context2.t6 = (0, _context2.t2)(
                                                _context2.t5
                                            );
                                            _context2.next = 23;
                                            return (0, _context2.t0)(
                                                _context2.t1,
                                                _context2.t6
                                            );

                                        case 23:
                                            console.info(
                                                '--------------------'
                                            );
                                            console.timeEnd('Boot project');
                                            console.info('');
                                            _context2.next = 28;
                                            return (0, _fsExtra.outputFile)(
                                                (0, _path.join)(
                                                    cwd,
                                                    '.gitignore'
                                                ),
                                                Git_ignore
                                            );

                                        case 28:
                                            (0, _crossSpawn.default)(
                                                'npm',
                                                ['install'],
                                                {
                                                    stdio: 'inherit',
                                                    cwd: cwd
                                                }
                                            );

                                        case 29:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            },
                            _callee2,
                            this
                        );
                    })
                );
                return _boot.apply(this, arguments);
            }
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            require('@babel/polyfill');

            var _fsExtra = require('fs-extra');

            var _core = require('./core');

            var cwd = process.argv[2];
            if (cwd) (0, _fsExtra.ensureDirSync)(cwd);
            (0, _core.boot)(cwd);
        }
    },
    'fs-extra': {
        exports: fs_extra
    },
    path: {
        exports: path
    },
    '@tech_query/node-toolkit': {
        exports: _tech_query_node_toolkit
    },
    'regenerator-runtime/runtime': {
        exports: regenerator_runtime_runtime
    },
    'web-cell/dist/polyfill': {
        exports: web_cell_dist_polyfill
    },
    'web-cell': {
        exports: web_cell
    },
    'simple-git/promise': {
        exports: simple_git_promise
    },
    'cross-spawn': {
        exports: cross_spawn
    },
    '@babel/polyfill': {
        exports: _babel_polyfill
    }
};

    return _include_('./index');
});